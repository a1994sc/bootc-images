---
name: Container, Almalinux, EL10
on:
  workflow_dispatch:
  push:
    paths:
      - el10/almalinux/**
      - static/**
      - .github/workflows/build_bootc_el10_alma.yml
    branches:
      - main
    tags:
      - 'almalinux/10\.[0-9]+-[0-9]+'
  schedule:
    - cron: '15 0 * * 0'

env:
  DISTRO: "almalinux"
  MAJOR: "10"
  IMAGE_NAME: ${{ github.event.repository.name }}/bootc/alma
  IMAGE_RPM_NAME: ${{ github.event.repository.name }}/rpm/alma
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  info:
    name: Determine build info
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Determine Build Tag
        id: tag
        env:
          sha: ${{ github.sha }}
          job: ${{ github.run_number }}
        run: |-
          echo "TAG=$(cat el10/${{ env.DISTRO }}/Containerfile | grep -i "${{ env.DISTRO }}" | grep -iE "^from.+bootc" | sed -E "s/.+:(.+)/\1/g")-$(echo $job-${sha:0:8})" >> $GITHUB_OUTPUT

      - name: Get Git Tag Info
        id: git-tag
        run: |-
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
            echo "tag=$(echo ${{ github.ref }} | sed 's!refs/tags/${{ env.DISTRO }}/!!g')"
            echo "tag=$(echo ${{ github.ref }} | sed 's!refs/tags/${{ env.DISTRO }}/!!g')" >> $GITHUB_OUTPUT
          else
            echo "TAG=''"
            echo "TAG=''" >> $GITHUB_OUTPUT
          fi

      - name: Output version
        id: determine
        run: |-
          if [[ "${{ steps.git-tag.outputs.TAG }}" != "''" ]]; then
            echo "version=${{ steps.git-tag.outputs.TAG }}"
            echo "version=${{ steps.git-tag.outputs.TAG }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.tag.outputs.TAG }}"
            echo "version=${{ steps.tag.outputs.TAG }}" >> $GITHUB_OUTPUT
          fi
    outputs:
      tag: ${{ steps.determine.outputs.version }}

  build-bootc:
    name: Build bootc image
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-latest' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' }}
    strategy:
      matrix:
        platform:
          - amd64
          - arm64
    needs:
      - info
    permissions:
      packages: write
    container:
      # renovate: datasource=docker
      image: quay.io/almalinuxorg/10-base:10.0-20250909
      options: --privileged
    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Get container tools into builder
        run: |
          dnf -y install podman buildah skopeo fuse-overlayfs

      # workaround for https://github.com/redhat-actions/podman-login/issues/42 since the docker config from the host doesn't come up to the container
      - name: Workaround open podman-login action issue
        env:
          auth: "{ \"auths\": {} }"
        run: |
          mkdir -p $HOME/.docker
          echo $auth > $HOME/.docker/config.json

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          auth_file_path: /run/containers/0/auth.json

      - name: Use buildah bud to create the image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2.13
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: latest ${{ needs.info.outputs.tag }}
          containerfiles: |-
            el10/${{ env.DISTRO }}/Containerfile
          context: ./.

      - name: Re-tag the built image
        run: |-
          podman tag ${{ steps.build-image.outputs.image }}:${{ needs.info.outputs.tag }} ghcr.io/${{ github.repository_owner }}/${{ steps.build-image.outputs.image }}${{ env.MAJOR }}:${{ needs.info.outputs.tag }}-${{ matrix.platform }}

      - name: Push the built image
        env:
          REGISTRY_AUTH_FILE: /run/containers/0/auth.json
        run: |-
          podman push --tls-verify=true ghcr.io/${{ github.repository_owner }}/${{ steps.build-image.outputs.image }}${{ env.MAJOR }}:${{ needs.info.outputs.tag }}-${{ matrix.platform }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      tag: ${{ needs.info.outputs.tag }}

  build-rpm:
    name: Build rpm oci artifact
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-latest' || matrix.platform == 'arm64' && 'ubuntu-24.04-arm' }}
    strategy:
      matrix:
        platform:
          - amd64
          - arm64
    needs:
      - info
    permissions:
      packages: write
    container:
      # renovate: datasource=docker
      image: quay.io/almalinuxorg/10-base:10.0-20250909
      # needed for login to ghcr
      options: --privileged
    env:
      IMAGE: |-
        ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/rpm/alma10:${{ needs.info.outputs.tag }}-${{ matrix.platform }}
    steps:
      - name: Get container tools into builder
        run: |
          dnf -y install epel-release 'dnf-command(config-manager)'

          dnf config-manager --set-enabled crb

          dnf install -y yq podman fuse-overlayfs createrepo file

      - name: Install oras tool
        uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4

      # workaround for https://github.com/redhat-actions/podman-login/issues/42 since the docker config from the host doesn't come up to the container
      - name: Workaround open podman-login action issue
        env:
          auth: "{ \"auths\": {} }"
        run: |
          mkdir -p $HOME/.docker
          echo $auth > $HOME/.docker/config.json

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          auth_file_path: /run/containers/0/auth.json

      - name: Create workspace
        run: |-
          mkdir -p /root/rpm

      - name: Download packages
        run: |-
          dnf install @core @standard yq container-selinux ansible-core \
            --releasever ${{ env.MAJOR }} --assumeyes --downloadonly --destdir /root/rpm --installroot /root/rpm --nodocs --refresh

      - name: Create local repo files
        run: |-
          rm -rf /root/rpm/var /root/rpm/usr
          createrepo /root/rpm

      - name: Upload to ghcr staging
        working-directory: /root/rpm
        run: |-
          find /root/rpm -type f | sed 's#/root/rpm/##g' | xargs -I {} bash -c 'echo {}:$(file -b --mime-type {})' | \
            awk '
              BEGIN {
                printf "oras push --artifact-type application/vnd.adrp.package.bundle.v1 "
                printf "--artifact-platform 'linux/${{ matrix.platform }}' "
                printf "--registry-config /run/containers/0/auth.json --no-tty ${{ env.IMAGE }}"
              } {
                printf " %s ", $0
              } END{print ""}' | \
            xargs -I {} sh -c "eval {}"
    outputs:
      tag: ${{ needs.info.outputs.tag }}

  merge:
    name: Merge artifacts
    runs-on: ubuntu-latest
    needs:
      - build-bootc
      - build-rpm
    strategy:
      fail-fast: false
      matrix:
        type:
          - bootc
          - rpm
    steps:
      - name: Install oras tool
        uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and pushes
        run: |-
          oras manifest index create \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ matrix.type }}/alma${{ env.MAJOR }}:latest \
            ${{ needs.build-bootc.outputs.tag }}-amd64 ${{ needs.build-bootc.outputs.tag }}-arm64
          oras manifest index create \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ matrix.type }}/alma${{ env.MAJOR }}:${{ needs.build-bootc.outputs.tag }} \
            ${{ needs.build-bootc.outputs.tag }}-amd64 ${{ needs.build-bootc.outputs.tag }}-arm64
    outputs:
      tag: ${{ needs.build-bootc.outputs.tag }}

  zarf:
    name: Build zarf packages
    runs-on: ubuntu-latest
    needs:
      - merge
    strategy:
      fail-fast: false
      matrix:
        type:
          - bootc
          - rpm
        platform:
          - amd64
          - arm64
    permissions:
      packages: write
    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install The Latest Release Version of Zarf
        uses: zarf-dev/setup-zarf@10e539efed02f75ec39eb8823e22a5c795f492ae # v1.0.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Zarf package
        run: |-
          zarf package create \
            el10/${{ env.DISTRO }} \
            --architecture ${{ matrix.platform }} \
            --confirm \
            --flavor ${{ matrix.type }} \
            --set version=${{ needs.merge.outputs.tag }}

      - name: Publish Zarf package
        run: |-
          zarf package publish zarf-*.zst oci://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/zarf
